function [Mu, Sigma, KLD] = expectationMax(X, k, M, S)
% Run expectation maximization algorithm on data
% to cluster data into k groupings using the 
% closed form mean and covarience updates offered
% by the congugate gausssian prior
% Return Mu, a vector of the means and Sigma a vector 
% of covariences for each for each distribution
% X - Column vector of data
% k - Number of clusters
% M - vector of means that generated data
% S - vector of covariences that generated data

m = size(X,1);
n = size(X,2);

% Randomly select initial means from dataset
Mu = X(randperm(k),:);
prevMu = zeros(k,n);

% Use covarience of dataset for each initial covarience 
Sigma = zeros(n,n,k);
for i = 1:k
    Sigma(:,:,i) = cov(X);
end

% prior probability that a random data point was generated 
% by the kth distribution, initialized to flat prior
Prior = ones(1,k)*(1/k);

% probability that the mth data point was generated by
% the kth distribution, P(y=j|z=i,theta)
W = zeros(m,k);

% while not convergent
KLD = [];
while Mu ~= prevMu
%for b = 1:50
    prevMu = Mu;
    
    % Expectation:
    px = zeros(m,k);
    for j = 1:k      
        px(:,j) = gaussianND(X, Mu(j,:), Sigma(:,:,j));
    end
    ppx = bsxfun(@times, px, Prior);
    W = bsxfun(@rdivide, ppx, sum(ppx,2));

    % Maximization:
    % closed form mle for mean and covarience since
    % we are maximizing paramerters of guassian mixture
    for j = 1:k
        Mu(j,:) = (W(:,j)'*X) ./ sum(W(:,j),1);
        dfm = bsxfun(@minus, X, Mu(j,:));
        var = zeros(n, n);
        for i = 1:m
            var = var + (W(i, j) .* (dfm(i, :)'*dfm(i, :)));
        end
        Sigma(:,:,j) = var ./ sum(W(:,j));
        Prior(j) = mean(W(:, j), 1);
    end    
    KLD = [KLD; approxKLdiv(Mu, Sigma, M, S)];
end
if size(Mu,2) == 2
figure(1);
plot(X(:, 1), X(:, 2), 'ko');
hold on;

% Plot the contour lines of the distributions
gridSize = 100;
Mx = max(X(:,1))+1;
mx = min(X(:,1))-1;
My = max(X(:,2))+1;
my = min(X(:,2))-1;

u = linspace(min([mx,my]), max([Mx,My]), gridSize);
[A, B] = meshgrid(u, u);
gridX = [A(:), B(:)];

for i = 1:k
    pd = gaussianND(gridX, Mu(i,:), Sigma(:,:,i));
    PD = reshape(pd, gridSize, gridSize);
    contour(u, u, PD);
end

axis([mx,Mx,my,My])
title('Estimated Distributions Full EM (50 iter)');
end
end

    
    
    
    
    
