function [Mu, Sigma, KLD] = expectationMaxSGDr(X, k, M, S)
% Run expectation maximization algorithm on data
% to cluster data into k groupings using the maximization
% maximization paradigm offered by interpreting the 
% expectation step as the mazimization of F wrt P*
% Return Mu, a vector of the means and Sigma a vector 
% of covariences for each for each distribution
% X - Column vector of data
% k - Number of clusters
% M - vector of means that generated data
% S - vector of covariences that generated data

m = size(X,1);
n = size(X,2);

% Randomly select initial means from dataset
% Need to do, split mean into m parts 
Mu = zeros(k,n,m);
Mutotal = X(randperm(k),:);
for i = 1:m
    Mu(:,:,i) = Mutotal/m;
end
% sum(Mu,3) = Mutotal

% Note: Not sure how to check convergence on this
prevMu = zeros(k,n); 

% Use covarience of dataset for each initial covarience
Sigma = zeros(n,n,k,m);
Sigmatotal = zeros(n,n,k);
for j = 1:k
    Sigmatotal(:,:,j) = cov(X);
end
for i = 1:m
    Sigma(:,:,:,i) = Sigmatotal/m;
end
% sum(Sigma,4) = Sigmatotal

% prior probability that a random data point was generated 
% by the kth distribution, initialized to flat prior
Prior = ones(1,k)*(1/k);

% probability that the mth data point was generated by
% the kth distribution, P(y=j|z=i,theta)
% My problem: You need to run a single itteration of the 
% standard algorithm to initialize this...
px = zeros(m,k);
for j = 1:k
    px(:,j) = gaussianND(X, sum(Mu(j,:,:),3), ...
                            sum(Sigma(:,:,j,:),4));
end
ppx = bsxfun(@times, px, Prior);
W = bsxfun(@rdivide, ppx, sum(ppx,2));

% while not convergent
KLD = [];
%while sum(Mu,3) ~= prevMu
for b = 1:50
for c = 1:m
    prevMu = sum(Mu,3);
    
    i = randi(m);
    % Expectation:
    pxi = zeros(1,k);
    for j = 1:k
        pxi(1,j) = gaussianND(X(i,:), sum(Mu(j,:,:),3), ...
            sum(Sigma(:,:,j,:),4));
    end
    ppxi = pxi .* Prior;
    W(i,:) = ppxi ./ sum(ppxi);
    
    % Maximization
    for j = 1:k
        Mu(j,:,i) = W(i,j)*X(i,:)/sum(W(:,j));
        dfm = X(i,:) - sum(Mu(j,:,:),3);
        Sigma(:,:,j,i) = W(i,j)*(dfm'*dfm)/sum(W(:,j));
        Prior(j) = mean(W(:, j), 1);
    end
end
KLD = [KLD; approxKLdiv(sum(Mu,3), sum(Sigma,4), M, S)];
end

% run one more itteration to tighten approximation
% for b = 1:40
% for i = 1:m
%     % Expectation:
%     pxi = zeros(1,k);
%     for j = 1:k
%         pxi(1,j) = gaussianND(X(i,:), sum(Mu(j,:,:),3), ...
%             sum(Sigma(:,:,j,:),4));
%     end
%     ppxi = pxi .* Prior;
%     W(i,:) = ppxi ./ sum(ppxi);
%     
%     % Maximization
%     for j = 1:k
%         Mu(j,:,i) = W(i,j)*X(i,:)/sum(W(:,j));
%         dfm = X(i,:) - sum(Mu(j,:,:),3);
%         Sigma(:,:,j,i) = W(i,j)*(dfm'*dfm)/sum(W(:,j));
%         Prior(j) = mean(W(:, j), 1);
%     end
% end
% KLD = [KLD; approxKLdiv(sum(Mu,3), sum(Sigma,4), M, S)];
% end

if size(Mu,2) == 2
figure(1);
plot(X(:, 1), X(:, 2), 'ko');
hold on;

% Plot the contour lines of the distributions
gridSize = 100;
Mx = max(X(:,1))+1;
mx = min(X(:,1))-1;
My = max(X(:,2))+1;
my = min(X(:,2))-1;

u = linspace(min([mx,my]), max([Mx,My]), gridSize);
[A, B] = meshgrid(u, u);
gridX = [A(:), B(:)];

for j = 1:k
    pd = gaussianND(gridX, sum(Mu(j,:,:),3), sum(Sigma(:,:,j,:),4));
    PD = reshape(pd, gridSize, gridSize);
    contour(u, u, PD);
end

axis([mx,Mx,my,My])
title('Estimated Distributions by SIEM (50 iter)');
end
end

